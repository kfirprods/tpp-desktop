# -*- coding: utf-8 -*-
# **********************************************************************
#
# Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.7.0
#
# <auto-generated>
#
# Generated from file `ClientServerApi.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module main
_M_main = Ice.openModule('main')
__name__ = 'main'

_M_main._t_GuiOperations = IcePy.defineValue('::main::GuiOperations', Ice.Value, -1, (), False, True, None, ())

if 'GuiOperationsPrx' not in _M_main.__dict__:
    _M_main.GuiOperationsPrx = Ice.createTempClass()
    class GuiOperationsPrx(Ice.ObjectPrx):

        def ShowMessageBox(self, text, context=None):
            return _M_main.GuiOperations._op_ShowMessageBox.invoke(self, ((text, ), context))

        def ShowMessageBoxAsync(self, text, context=None):
            return _M_main.GuiOperations._op_ShowMessageBox.invokeAsync(self, ((text, ), context))

        def begin_ShowMessageBox(self, text, _response=None, _ex=None, _sent=None, context=None):
            return _M_main.GuiOperations._op_ShowMessageBox.begin(self, ((text, ), _response, _ex, _sent, context))

        def end_ShowMessageBox(self, _r):
            return _M_main.GuiOperations._op_ShowMessageBox.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_main.GuiOperationsPrx.ice_checkedCast(proxy, '::main::GuiOperations', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_main.GuiOperationsPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::main::GuiOperations'
    _M_main._t_GuiOperationsPrx = IcePy.defineProxy('::main::GuiOperations', GuiOperationsPrx)

    _M_main.GuiOperationsPrx = GuiOperationsPrx
    del GuiOperationsPrx

    _M_main.GuiOperations = Ice.createTempClass()
    class GuiOperations(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::main::GuiOperations')

        def ice_id(self, current=None):
            return '::main::GuiOperations'

        @staticmethod
        def ice_staticId():
            return '::main::GuiOperations'

        def ShowMessageBox(self, text, current=None):
            raise NotImplementedError("servant method 'ShowMessageBox' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_main._t_GuiOperationsDisp)

        __repr__ = __str__

    _M_main._t_GuiOperationsDisp = IcePy.defineClass('::main::GuiOperations', GuiOperations, (), None, ())
    GuiOperations._ice_type = _M_main._t_GuiOperationsDisp

    GuiOperations._op_ShowMessageBox = IcePy.Operation('ShowMessageBox', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())

    _M_main.GuiOperations = GuiOperations
    del GuiOperations

if '_t_StringArray' not in _M_main.__dict__:
    _M_main._t_StringArray = IcePy.defineSequence('::main::StringArray', (), IcePy._t_string)

_M_main._t_Plugin = IcePy.defineValue('::main::Plugin', Ice.Value, -1, (), False, True, None, ())

if 'PluginPrx' not in _M_main.__dict__:
    _M_main.PluginPrx = Ice.createTempClass()
    class PluginPrx(Ice.ObjectPrx):

        def execute(self, files, context=None):
            return _M_main.Plugin._op_execute.invoke(self, ((files, ), context))

        def executeAsync(self, files, context=None):
            return _M_main.Plugin._op_execute.invokeAsync(self, ((files, ), context))

        def begin_execute(self, files, _response=None, _ex=None, _sent=None, context=None):
            return _M_main.Plugin._op_execute.begin(self, ((files, ), _response, _ex, _sent, context))

        def end_execute(self, _r):
            return _M_main.Plugin._op_execute.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_main.PluginPrx.ice_checkedCast(proxy, '::main::Plugin', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_main.PluginPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::main::Plugin'
    _M_main._t_PluginPrx = IcePy.defineProxy('::main::Plugin', PluginPrx)

    _M_main.PluginPrx = PluginPrx
    del PluginPrx

    _M_main.Plugin = Ice.createTempClass()
    class Plugin(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::main::Plugin')

        def ice_id(self, current=None):
            return '::main::Plugin'

        @staticmethod
        def ice_staticId():
            return '::main::Plugin'

        def execute(self, files, current=None):
            raise NotImplementedError("servant method 'execute' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_main._t_PluginDisp)

        __repr__ = __str__

    _M_main._t_PluginDisp = IcePy.defineClass('::main::Plugin', Plugin, (), None, ())
    Plugin._ice_type = _M_main._t_PluginDisp

    Plugin._op_execute = IcePy.Operation('execute', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_main._t_StringArray, False, 0),), (), None, ())

    _M_main.Plugin = Plugin
    del Plugin

# End of module main
