// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `ClientServerApi.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace IceCompactId
{
}

namespace Api
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface GuiOperations : Ice.Object, GuiOperationsOperations_
    {
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface Plugin : Ice.Object, PluginOperations_
    {
    }
}

namespace Api
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public delegate void Callback_GuiOperations_ShowMessageBox();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public delegate void Callback_Plugin_execute();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public delegate void Callback_Plugin_shutdown();
}

namespace Api
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public interface GuiOperationsPrx : Ice.ObjectPrx
    {
        void ShowMessageBox(string text, Ice.OptionalContext context = new Ice.OptionalContext());

        _System.Threading.Tasks.Task ShowMessageBoxAsync(string text, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken());

        Ice.AsyncResult<Api.Callback_GuiOperations_ShowMessageBox> begin_ShowMessageBox(string text, Ice.OptionalContext context = new Ice.OptionalContext());

        Ice.AsyncResult begin_ShowMessageBox(string text, Ice.AsyncCallback callback, object cookie);

        Ice.AsyncResult begin_ShowMessageBox(string text, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie);

        void end_ShowMessageBox(Ice.AsyncResult asyncResult);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public interface PluginPrx : Ice.ObjectPrx
    {
        void execute(string[] files, Ice.OptionalContext context = new Ice.OptionalContext());

        _System.Threading.Tasks.Task executeAsync(string[] files, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken());

        Ice.AsyncResult<Api.Callback_Plugin_execute> begin_execute(string[] files, Ice.OptionalContext context = new Ice.OptionalContext());

        Ice.AsyncResult begin_execute(string[] files, Ice.AsyncCallback callback, object cookie);

        Ice.AsyncResult begin_execute(string[] files, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie);

        void end_execute(Ice.AsyncResult asyncResult);

        void shutdown(Ice.OptionalContext context = new Ice.OptionalContext());

        _System.Threading.Tasks.Task shutdownAsync(Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken());

        Ice.AsyncResult<Api.Callback_Plugin_shutdown> begin_shutdown(Ice.OptionalContext context = new Ice.OptionalContext());

        Ice.AsyncResult begin_shutdown(Ice.AsyncCallback callback, object cookie);

        Ice.AsyncResult begin_shutdown(Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie);

        void end_shutdown(Ice.AsyncResult asyncResult);
    }
}

namespace Api
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public interface GuiOperationsOperations_
    {
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        void ShowMessageBox(string text, Ice.Current current = null);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public interface PluginOperations_
    {
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        void execute(string[] files, Ice.Current current = null);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        void shutdown(Ice.Current current = null);
    }
}

namespace Api
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public sealed class StringArrayHelper
    {
        public static void write(Ice.OutputStream ostr, string[] v)
        {
            ostr.writeStringSeq(v);
        }

        public static string[] read(Ice.InputStream istr)
        {
            string[] v;
            v = istr.readStringSeq();
            return v;
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    [_System.Serializable]
    public sealed class GuiOperationsPrxHelper : Ice.ObjectPrxHelperBase, GuiOperationsPrx
    {
        public GuiOperationsPrxHelper()
        {
        }

        public GuiOperationsPrxHelper(_System.Runtime.Serialization.SerializationInfo info, _System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public void ShowMessageBox(string text, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            try
            {
                _iceI_ShowMessageBoxAsync(text, context, null, _System.Threading.CancellationToken.None, true).Wait();
            }
            catch(_System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public _System.Threading.Tasks.Task ShowMessageBoxAsync(string text, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken())
        {
            return _iceI_ShowMessageBoxAsync(text, context, progress, cancel, false);
        }

        private _System.Threading.Tasks.Task _iceI_ShowMessageBoxAsync(string iceP_text, Ice.OptionalContext context, _System.IProgress<bool> progress, _System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_ShowMessageBox(iceP_text, context, synchronous, completed);
            return completed.Task;
        }

        private const string _ShowMessageBox_name = "ShowMessageBox";

        private void _iceI_ShowMessageBox(string iceP_text, _System.Collections.Generic.Dictionary<string, string> context, bool synchronous, IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _ShowMessageBox_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_text);
                });
        }

        #endregion

        #region Asynchronous operations

        public Ice.AsyncResult<Api.Callback_GuiOperations_ShowMessageBox> begin_ShowMessageBox(string text, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            return begin_ShowMessageBox(text, context, null, null, false);
        }

        public Ice.AsyncResult begin_ShowMessageBox(string text, Ice.AsyncCallback callback, object cookie)
        {
            return begin_ShowMessageBox(text, new Ice.OptionalContext(), callback, cookie, false);
        }

        public Ice.AsyncResult begin_ShowMessageBox(string text, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie)
        {
            return begin_ShowMessageBox(text, context, callback, cookie, false);
        }

        public void end_ShowMessageBox(Ice.AsyncResult asyncResult)
        {
            var resultI_ = IceInternal.AsyncResultI.check(asyncResult, this, _ShowMessageBox_name);
            ((IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private Ice.AsyncResult<Api.Callback_GuiOperations_ShowMessageBox> begin_ShowMessageBox(string iceP_text, _System.Collections.Generic.Dictionary<string, string> context, Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new IceInternal.OperationAsyncResultCompletionCallback<Api.Callback_GuiOperations_ShowMessageBox, object>(
                (Api.Callback_GuiOperations_ShowMessageBox cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _ShowMessageBox_name, cookie, completedCallback);
            _iceI_ShowMessageBox(iceP_text, context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static GuiOperationsPrx checkedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            GuiOperationsPrx r = b as GuiOperationsPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                GuiOperationsPrxHelper h = new GuiOperationsPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static GuiOperationsPrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            GuiOperationsPrx r = b as GuiOperationsPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                GuiOperationsPrxHelper h = new GuiOperationsPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static GuiOperationsPrx checkedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    GuiOperationsPrxHelper h = new GuiOperationsPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static GuiOperationsPrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    GuiOperationsPrxHelper h = new GuiOperationsPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static GuiOperationsPrx uncheckedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            GuiOperationsPrx r = b as GuiOperationsPrx;
            if(r == null)
            {
                GuiOperationsPrxHelper h = new GuiOperationsPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static GuiOperationsPrx uncheckedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            GuiOperationsPrxHelper h = new GuiOperationsPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Api::GuiOperations",
            "::Ice::Object"
        };

        public static string ice_staticId()
        {
            return _ids[0];
        }

        #endregion

        #region Marshaling support

        public static void write(Ice.OutputStream ostr, GuiOperationsPrx v)
        {
            ostr.writeProxy(v);
        }

        public static GuiOperationsPrx read(Ice.InputStream istr)
        {
            Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                GuiOperationsPrxHelper result = new GuiOperationsPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    [_System.Serializable]
    public sealed class PluginPrxHelper : Ice.ObjectPrxHelperBase, PluginPrx
    {
        public PluginPrxHelper()
        {
        }

        public PluginPrxHelper(_System.Runtime.Serialization.SerializationInfo info, _System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public void execute(string[] files, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            try
            {
                _iceI_executeAsync(files, context, null, _System.Threading.CancellationToken.None, true).Wait();
            }
            catch(_System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void shutdown(Ice.OptionalContext context = new Ice.OptionalContext())
        {
            try
            {
                _iceI_shutdownAsync(context, null, _System.Threading.CancellationToken.None, true).Wait();
            }
            catch(_System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public _System.Threading.Tasks.Task executeAsync(string[] files, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken())
        {
            return _iceI_executeAsync(files, context, progress, cancel, false);
        }

        private _System.Threading.Tasks.Task _iceI_executeAsync(string[] iceP_files, Ice.OptionalContext context, _System.IProgress<bool> progress, _System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_execute(iceP_files, context, synchronous, completed);
            return completed.Task;
        }

        private const string _execute_name = "execute";

        private void _iceI_execute(string[] iceP_files, _System.Collections.Generic.Dictionary<string, string> context, bool synchronous, IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _execute_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    Api.StringArrayHelper.write(ostr, iceP_files);
                });
        }

        public _System.Threading.Tasks.Task shutdownAsync(Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken())
        {
            return _iceI_shutdownAsync(context, progress, cancel, false);
        }

        private _System.Threading.Tasks.Task _iceI_shutdownAsync(Ice.OptionalContext context, _System.IProgress<bool> progress, _System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_shutdown(context, synchronous, completed);
            return completed.Task;
        }

        private const string _shutdown_name = "shutdown";

        private void _iceI_shutdown(_System.Collections.Generic.Dictionary<string, string> context, bool synchronous, IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _shutdown_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        #endregion

        #region Asynchronous operations

        public Ice.AsyncResult<Api.Callback_Plugin_execute> begin_execute(string[] files, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            return begin_execute(files, context, null, null, false);
        }

        public Ice.AsyncResult begin_execute(string[] files, Ice.AsyncCallback callback, object cookie)
        {
            return begin_execute(files, new Ice.OptionalContext(), callback, cookie, false);
        }

        public Ice.AsyncResult begin_execute(string[] files, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie)
        {
            return begin_execute(files, context, callback, cookie, false);
        }

        public void end_execute(Ice.AsyncResult asyncResult)
        {
            var resultI_ = IceInternal.AsyncResultI.check(asyncResult, this, _execute_name);
            ((IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private Ice.AsyncResult<Api.Callback_Plugin_execute> begin_execute(string[] iceP_files, _System.Collections.Generic.Dictionary<string, string> context, Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new IceInternal.OperationAsyncResultCompletionCallback<Api.Callback_Plugin_execute, object>(
                (Api.Callback_Plugin_execute cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _execute_name, cookie, completedCallback);
            _iceI_execute(iceP_files, context, synchronous, completed);
            return completed;
        }

        public Ice.AsyncResult<Api.Callback_Plugin_shutdown> begin_shutdown(Ice.OptionalContext context = new Ice.OptionalContext())
        {
            return begin_shutdown(context, null, null, false);
        }

        public Ice.AsyncResult begin_shutdown(Ice.AsyncCallback callback, object cookie)
        {
            return begin_shutdown(new Ice.OptionalContext(), callback, cookie, false);
        }

        public Ice.AsyncResult begin_shutdown(Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie)
        {
            return begin_shutdown(context, callback, cookie, false);
        }

        public void end_shutdown(Ice.AsyncResult asyncResult)
        {
            var resultI_ = IceInternal.AsyncResultI.check(asyncResult, this, _shutdown_name);
            ((IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private Ice.AsyncResult<Api.Callback_Plugin_shutdown> begin_shutdown(_System.Collections.Generic.Dictionary<string, string> context, Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new IceInternal.OperationAsyncResultCompletionCallback<Api.Callback_Plugin_shutdown, object>(
                (Api.Callback_Plugin_shutdown cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _shutdown_name, cookie, completedCallback);
            _iceI_shutdown(context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static PluginPrx checkedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            PluginPrx r = b as PluginPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                PluginPrxHelper h = new PluginPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static PluginPrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            PluginPrx r = b as PluginPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                PluginPrxHelper h = new PluginPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static PluginPrx checkedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    PluginPrxHelper h = new PluginPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static PluginPrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    PluginPrxHelper h = new PluginPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static PluginPrx uncheckedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            PluginPrx r = b as PluginPrx;
            if(r == null)
            {
                PluginPrxHelper h = new PluginPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static PluginPrx uncheckedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            PluginPrxHelper h = new PluginPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Api::Plugin",
            "::Ice::Object"
        };

        public static string ice_staticId()
        {
            return _ids[0];
        }

        #endregion

        #region Marshaling support

        public static void write(Ice.OutputStream ostr, PluginPrx v)
        {
            ostr.writeProxy(v);
        }

        public static PluginPrx read(Ice.InputStream istr)
        {
            Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                PluginPrxHelper result = new PluginPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace Api
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public abstract class GuiOperationsDisp_ : Ice.ObjectImpl, GuiOperations
    {
        #region Slice operations

        public abstract void ShowMessageBox(string text, Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Api::GuiOperations",
            "::Ice::Object"
        };

        public override bool ice_isA(string s, Ice.Current current = null)
        {
            return _System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(Ice.Current current = null)
        {
            return _ids[0];
        }

        public static new string ice_staticId()
        {
            return _ids[0];
        }

        #endregion

        #region Operation dispatch

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static _System.Threading.Tasks.Task<Ice.OutputStream>
        iceD_ShowMessageBox(GuiOperations obj, IceInternal.Incoming inS, Ice.Current current)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_text;
            iceP_text = istr.readString();
            inS.endReadParams();
            obj.ShowMessageBox(iceP_text, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        private static readonly string[] _all =
        {
            "ShowMessageBox",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override _System.Threading.Tasks.Task<Ice.OutputStream>
        iceDispatch(IceInternal.Incoming inS, Ice.Current current)
        {
            int pos = _System.Array.BinarySearch(_all, current.operation, IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_ShowMessageBox(this, inS, current);
                }
                case 1:
                {
                    return Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 2:
                {
                    return Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 3:
                {
                    return Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 4:
                {
                    return Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
            }

            _System.Diagnostics.Debug.Assert(false);
            throw new Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public abstract class PluginDisp_ : Ice.ObjectImpl, Plugin
    {
        #region Slice operations

        public abstract void execute(string[] files, Ice.Current current = null);

        public abstract void shutdown(Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Api::Plugin",
            "::Ice::Object"
        };

        public override bool ice_isA(string s, Ice.Current current = null)
        {
            return _System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(Ice.Current current = null)
        {
            return _ids[0];
        }

        public static new string ice_staticId()
        {
            return _ids[0];
        }

        #endregion

        #region Operation dispatch

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static _System.Threading.Tasks.Task<Ice.OutputStream>
        iceD_execute(Plugin obj, IceInternal.Incoming inS, Ice.Current current)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string[] iceP_files;
            iceP_files = Api.StringArrayHelper.read(istr);
            inS.endReadParams();
            obj.execute(iceP_files, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static _System.Threading.Tasks.Task<Ice.OutputStream>
        iceD_shutdown(Plugin obj, IceInternal.Incoming inS, Ice.Current current)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.shutdown(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        private static readonly string[] _all =
        {
            "execute",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "shutdown"
        };

        public override _System.Threading.Tasks.Task<Ice.OutputStream>
        iceDispatch(IceInternal.Incoming inS, Ice.Current current)
        {
            int pos = _System.Array.BinarySearch(_all, current.operation, IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_execute(this, inS, current);
                }
                case 1:
                {
                    return Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 2:
                {
                    return Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 3:
                {
                    return Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 4:
                {
                    return Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 5:
                {
                    return iceD_shutdown(this, inS, current);
                }
            }

            _System.Diagnostics.Debug.Assert(false);
            throw new Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }
}
